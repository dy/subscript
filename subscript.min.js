export const operators=[{"(":(...e)=>e(...args),"[":(...e)=>e.reduce(((e,r)=>e?e[r]:e)),".":(...e)=>e.reduce(((e,r)=>e?e[r]:e))},{"!":e=>!e,"+":e=>+e,"-":e=>-e,"++":e=>++e,"--":e=>--e},{"%":(...e)=>e.reduce(((e,r)=>e%r)),"/":(...e)=>e.reduce(((e,r)=>e/r)),"*":(...e)=>e.reduce(((e,r)=>e*r))},{"+":(...e)=>e.reduce(((e,r)=>e+r)),"-":(...e)=>e.reduce(((e,r)=>e-r))},{">>>":(e,r)=>e>>>r,">>":(e,r)=>e>>r,"<<":(e,r)=>e<<r},{">=":(e,r)=>e>=r,">":(e,r)=>e>r,"<=":(e,r)=>e<=r,"<":(e,r)=>e<r},{"!=":(e,r)=>e!=r,"==":(e,r)=>e==r},{"&":(e,r)=>e&r},{"^":(e,r)=>e^r},{"|":(e,r)=>e|r},{"&&":(...e)=>e.every(Boolean)},{"||":(...e)=>e.some(Boolean)},{",":(...e)=>e[e.length-1]}],operator=(e,r,s,t)=>{if(e&&"string"==typeof e&&!quotes[e[0]])for(t=operators.length;t--;)if((s=operators[t][e])&&1==r?s.length==r:s)return s},literals={true:!0,false:!1,null:null,undefined:void 0},blocks={"(":")","[":"]"},quotes={'"':'"'},transforms={"(":e=>e.length<2?e[1]:e.slice(1).reduce(((e,r)=>[e].concat(r?","==r[0]?r.slice(1):[r]:[]))),".":e=>[e[0],e[1],...e.slice(2).map((e=>`"${e}"`))]},transform=(e,r)=>(r=isnode(e)&&transforms[e[0]])?r(e):e,isnode=e=>Array.isArray(e)&&e.length&&e[0],space=" \r\n\t",parse=(e,r=0)=>{const s=(o,l="",a,n,i,p,u=[])=>{const c=e=>{""!==l&&u.push(a?parseFloat(l):l in literals?literals[l]:l),e&&u.push(e),a=l=i=""};for(;r<=e.length;l+=i)if(i=e[r++],n&&i==n)n="";else if(!a||"e"!=i&&"E"!=i)if(space.includes(i))c();else if(quotes[i])n=i;else if(!l&&i>="0"&&i<="9"||"."==i&&e[r]>="0"&&e[r]<="9")a=1;else if(p=blocks[i])c(i),u.push(s(p));else{if(i==o)return c(),t(u);(operator(i+=e[r++])||operator((r--,i=i[0])))&&(i.toLowerCase()==i.toUpperCase()||!l&&space.includes(e[r]))&&c(i)}else i+=e[r++]},t=e=>{if(!e.length)return;let r,s,t,o,l,a,n;const i=()=>{return~t&&(e[t]=(r=e[t],(s=isnode(r)&&transforms[r[0]])?s(r):r),t=-1);var r,s};for(r of operators){for(t=-1,s=1;s<e.length;)o=e[s-2],a=e[s-1],l=e[s],n="string"==typeof a&&r[a],n&&!operator(l)&&s>1&&!operator(o)?1==r[a].length?(i(),s++):t==s-2&&o[0]==a?(o.push(l),e.splice(s-1,2)):(i(),e.splice(t=s-2,3,[a,e[t],l])):n&&!operator(l)?(e.splice(t=s-1,2,[a,l]),s--):(i(),s++);i()}return e.length>1?e:e[0]};return e=s()},evaluate=(e,r={},s)=>isnode(e)?(isnode(e[0])?evaluate(e[0]):r[e[0]]||operator(e[0],e.length-1))(...e.slice(1).map((e=>evaluate(e,r)))):"string"==typeof e?quotes[e[0]]?e.slice(1,-1):r[e]:e;export default e=>(e="string"==typeof e?parse(e):e,r=>evaluate(e,r));
